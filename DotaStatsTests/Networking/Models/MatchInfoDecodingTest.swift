import XCTest
@testable import DotaStats

class MatchInfoDecodingTest: XCTestCase {
    func testJSONDecoding() throws {
        let bundle = Bundle(for: type(of: self))
        
        guard let path = bundle.url(forResource: "MockMatch", withExtension: "json") else {
            XCTFail("Missing file: MockMatch.json")
            return
        }

        let jsonData = try Data(contentsOf: path)

        let jsonDecoder = JSONDecoder()
        jsonDecoder.keyDecodingStrategy = .convertFromSnakeCase
        
        let decodedData = try jsonDecoder.decode(MatchDetail.self,
                                                   from: jsonData)
                
        XCTAssertEqual(decodedData.matchId, 1)
        XCTAssertEqual(decodedData.barracksStatusDire, nil)
        XCTAssertEqual(decodedData.barracksStatusRadiant, nil)
        XCTAssertEqual(decodedData.chat, nil)
        XCTAssertEqual(decodedData.cluster, nil)
        XCTAssertEqual(decodedData.direScore, nil)
        XCTAssertEqual(decodedData.draftTimings, nil)
        XCTAssertEqual(decodedData.duration, nil)
        XCTAssertEqual(decodedData.engine, nil)
        XCTAssertEqual(decodedData.firstBloodTime, nil)
        XCTAssertEqual(decodedData.gameMode, nil)
        XCTAssertEqual(decodedData.humanPlayers, nil)
        XCTAssertEqual(decodedData.leagueid, nil)
        XCTAssertEqual(decodedData.lobbyType, nil)
        XCTAssertEqual(decodedData.matchSeqNum, nil)
        XCTAssertEqual(decodedData.negativeVotes, nil)
        XCTAssertEqual(decodedData.positiveVotes, nil)
        XCTAssertEqual(decodedData.radiantScore, nil)
        XCTAssertEqual(decodedData.radiantWin, nil)
        XCTAssertEqual(decodedData.startTime, nil)
        XCTAssertEqual(decodedData.towerStatusDire, nil)
        XCTAssertEqual(decodedData.towerStatusRadiant, nil)
        XCTAssertEqual(decodedData.version, nil)
        XCTAssertEqual(decodedData.replaySalt, nil)
        XCTAssertEqual(decodedData.seriesId, nil)
        XCTAssertEqual(decodedData.seriesType, nil)
        XCTAssertEqual(decodedData.skill, nil)
        XCTAssertEqual(decodedData.patch, nil)
        XCTAssertEqual(decodedData.region, nil)
        XCTAssertEqual(decodedData.throw, nil)
        XCTAssertEqual(decodedData.comeback, nil)
        XCTAssertEqual(decodedData.loss, nil)
        XCTAssertEqual(decodedData.win, nil)
        XCTAssertEqual(decodedData.replayUrl, nil)
        XCTAssertEqual(decodedData.players[0].matchId, 1)
        XCTAssertEqual(decodedData.players[0].playerSlot, 0)
        XCTAssertEqual(decodedData.players[0].abilityUpgradesArr, nil)
        XCTAssertEqual(decodedData.players[0].accountId, nil)
        XCTAssertEqual(decodedData.players[0].assists, nil)
        XCTAssertEqual(decodedData.players[0].backpack0, nil)
        XCTAssertEqual(decodedData.players[0].backpack1, nil)
        XCTAssertEqual(decodedData.players[0].backpack2, nil)
        XCTAssertEqual(decodedData.players[0].buybackLog, nil)
        XCTAssertEqual(decodedData.players[0].campsStacked, nil)
        XCTAssertEqual(decodedData.players[0].connectionLog, nil)
        XCTAssertEqual(decodedData.players[0].creepsStacked, nil)
        XCTAssertEqual(decodedData.players[0].deaths, nil)
        XCTAssertEqual(decodedData.players[0].denies, nil)
        XCTAssertEqual(decodedData.players[0].dnT, nil)
        XCTAssertEqual(decodedData.players[0].gold, nil)
        XCTAssertEqual(decodedData.players[0].goldPerMin, nil)
        XCTAssertEqual(decodedData.players[0].goldSpent, nil)
        XCTAssertEqual(decodedData.players[0].goldT, nil)
        XCTAssertEqual(decodedData.players[0].heroDamage, nil)
        XCTAssertEqual(decodedData.players[0].heroHealing, nil)
        XCTAssertEqual(decodedData.players[0].heroId, nil)
        XCTAssertEqual(decodedData.players[0].item0, nil)
        XCTAssertEqual(decodedData.players[0].item1, nil)
        XCTAssertEqual(decodedData.players[0].item2, nil)
        XCTAssertEqual(decodedData.players[0].item3, nil)
        XCTAssertEqual(decodedData.players[0].item4, nil)
        XCTAssertEqual(decodedData.players[0].item5, nil)
        XCTAssertEqual(decodedData.players[0].kills, nil)
        XCTAssertEqual(decodedData.players[0].killsLog, nil)
        XCTAssertEqual(decodedData.players[0].lastHits, nil)
        XCTAssertEqual(decodedData.players[0].leaverStatus, nil)
        XCTAssertEqual(decodedData.players[0].level, nil)
        XCTAssertEqual(decodedData.players[0].lhT, nil)
        XCTAssertEqual(decodedData.players[0].obsPlaced, nil)
        XCTAssertEqual(decodedData.players[0].partyId, 0)
        XCTAssertEqual(decodedData.players[0].partySize, 3)
        XCTAssertEqual(decodedData.players[0].pings, nil)
        XCTAssertEqual(decodedData.players[0].purchaseLog, nil)
        XCTAssertEqual(decodedData.players[0].runePickups, nil)
        XCTAssertEqual(decodedData.players[0].runesLog, nil)
        XCTAssertEqual(decodedData.players[0].senPlaced, nil)
        XCTAssertEqual(decodedData.players[0].stuns, nil)
        XCTAssertEqual(decodedData.players[0].times, nil)
        XCTAssertEqual(decodedData.players[0].towerDamage, nil)
        XCTAssertEqual(decodedData.players[0].xpPerMin, nil)
        XCTAssertEqual(decodedData.players[0].xpT, nil)
        XCTAssertEqual(decodedData.players[0].personaname, nil)
        XCTAssertEqual(decodedData.players[0].name, nil)
        XCTAssertEqual(decodedData.players[0].radiantWin, nil)
        XCTAssertEqual(decodedData.players[0].startTime, nil)
        XCTAssertEqual(decodedData.players[0].duration, nil)
        XCTAssertEqual(decodedData.players[0].cluster, nil)
        XCTAssertEqual(decodedData.players[0].lobbyType, nil)
        XCTAssertEqual(decodedData.players[0].gameMode, nil)
        XCTAssertEqual(decodedData.players[0].patch, nil)
        XCTAssertEqual(decodedData.players[0].region, nil)
        XCTAssertEqual(decodedData.players[0].isRadiant, true)
        XCTAssertEqual(decodedData.players[0].win, 0)
        XCTAssertEqual(decodedData.players[0].lose, 1)
        XCTAssertEqual(decodedData.players[0].totalGold, nil)
        XCTAssertEqual(decodedData.players[0].totalXp, nil)
        XCTAssertEqual(decodedData.players[0].killsPerMin, nil)
        XCTAssertEqual(decodedData.players[0].kda, 0)
        XCTAssertEqual(decodedData.players[0].abandons, 0)
        XCTAssertEqual(decodedData.players[0].neutralKills, nil)
        XCTAssertEqual(decodedData.players[0].towerKills, nil)
        XCTAssertEqual(decodedData.players[0].courierKills, nil)
        XCTAssertEqual(decodedData.players[0].laneKills, nil)
        XCTAssertEqual(decodedData.players[0].heroKills, nil)
        XCTAssertEqual(decodedData.players[0].observerKills, nil)
        XCTAssertEqual(decodedData.players[0].sentryKills, nil)
        XCTAssertEqual(decodedData.players[0].roshanKills, nil)
        XCTAssertEqual(decodedData.players[0].necronomiconKills, nil)
        XCTAssertEqual(decodedData.players[0].ancientKills, nil)
        XCTAssertEqual(decodedData.players[0].buybackCount, nil)
        XCTAssertEqual(decodedData.players[0].observerUses, nil)
        XCTAssertEqual(decodedData.players[0].sentryUses, nil)
        XCTAssertEqual(decodedData.players[0].laneEfficiency, nil)
        XCTAssertEqual(decodedData.players[0].laneEfficiencyPct, nil)
        XCTAssertEqual(decodedData.players[0].lane, nil)
        XCTAssertEqual(decodedData.players[0].laneRole, nil)
        XCTAssertEqual(decodedData.players[0].isRoaming, nil)
        XCTAssertEqual(decodedData.players[0].actionsPerMin, nil)
        XCTAssertEqual(decodedData.players[0].lifeStateDead, nil)
        XCTAssertEqual(decodedData.players[0].rankTier, nil)
        XCTAssertEqual(decodedData.players[0].cosmetics, [])
    }
}
